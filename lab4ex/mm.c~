/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * 
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "Team48",
    /* First member's full name */
    "Joshua Kennedy",
    /* First member's NetID */
    "jfk7486",
    /* Second member's full name (leave blank if none) */
    "Christoph Sauter",
    /* Second member's NetID */
    "cds6792"
};

/* Private global variables */
static char *heap_listp;    /* Pointer to list */
static char *free_headp;    /* Pointer to head of free list */

/* Basic constants and some macros */
#define WSIZE 4           /* Word and header/footer size */
#define DSIZE 8           /* Double word size */
#define CHUNKSIZE (1<<12) /* Extend heap by this amount */
#define MIN_BLK_SIZE 24   /* Minimum block size for overhead */

#define MAX(x,y) ((x) > (y) ? (x) : (y)) /* returns max value */

/* Pack a size and the allocated bit into a single word */
#define PACK(size, alloc) ((size) | (alloc))

/* Read and write a word at address p */
#define GET(p)      (*(unsigned int *)(p))
#define PUT(p, val) (*(unsigned int *)(p) = (val))

/* Read the size and allocated bit from address p */
#define GET_SIZE(p)  (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1)

/* Returns pointers to block header/footer */
#define HEADERP(bp) ((char *)(bp) - WSIZE)
#define FOOTERP(bp) ((char *)(bp) + GET_SIZE(HEADERP(bp)) - DSIZE)

/* Return block pointers of next/previous block */
#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))

/* Return block pointers of next free block in free block list */
#define NEXT_FREE_BLKP(bp) ((void*)GET(bp + DSIZE))
#define PREV_FREE_BLKP(bp) ((void*)GET(bp))

/* Set next and prev pointers for free block list */
//#define SET_NEXT(bp, ptr) (PUT((bp) + DSIZE, (long)(ptr)))
//#define SET_PREV(bp, ptr) (PUT((bp), (long)(ptr)))

/* Return block pointers of next/previous free block */
//#define NEXT_FREE_BLKP(bp) ((char*)(bp) + (char*)(bp))
//#define PREV_FREE_BLKP(bp) ((char*)(bp) + ((char*)(bp) + DSIZE))

/* Set next/prev address pointers */
#define SET_NEXT(bp, addr) ((*(void**)(bp + DSIZE)) = (addr))
#define SET_PREV(bp, addr) ((*(void**)(bp)) = (addr))

/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8

/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)

#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))

/* Function definitions */
static void* extend_heap(size_t words);
static void place(void* bp, size_t asize);
static void* find_fit(size_t asize);
static void* coalesce(void* bp);
static void remove_block(void* bp);
static void add_block(void* bp);

/* Functions for debugging */
static void printb(void* bp);
static void check_heap();
static void real_check_heap();

/* Debugging booleans */
#define db1 0
#define db2 1

/* 
 * mm_init - initialize the malloc package.
 */
int mm_init(void)
{
  if (db1) printf("Running mm_init...\n");

  /*  Create initial empty heap */
  if ((heap_listp = mem_sbrk(4*WSIZE)) == (void *)-1) return -1;
  PUT(heap_listp, 0);                         /* Alignment padding */
  PUT(heap_listp + (WSIZE), PACK(DSIZE, 1));  /* Header for first block in heap */
  PUT(heap_listp + (DSIZE), PACK(DSIZE, 1));  /* Footer for first block in heap */
  PUT(heap_listp + (3*WSIZE), PACK(0, 1));    /* Header for last byte in heap */
  heap_listp += DSIZE;
  free_headp = 0;

  if (db1) printf("Creating initial free block by calling extend_heap...\n");

  /* Create initial free block by extending the heap by CHUNKSIZE */
  if (extend_heap(CHUNKSIZE/WSIZE) == NULL) return -1;
  
  if (db1) printf("Heap initialized\n");

  //if (db1) check_heap();
 
  return 0;
}

/* 
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void *mm_malloc(size_t size)
{
  size_t asize;      /* Adjusted block size */
  size_t extendsize; /* Amount to extend heap if no fit */
  char *bp;
  
  if (db2) printf("Call to malloc...\n");
  //if (db2) if (size == 72) check_heap();
  if (db2) printf("size = %d\n", size);
  //if (db2) check_heap();
  //if (db2) real_check_heap();


  /* Ignore stupid requests */
  if (size <= 0) return NULL;

  /* Adjust block size for overhead and alignment requirements */
  if (size <= DSIZE) {
    asize = 2*DSIZE;
  } else {
    asize = DSIZE * ((size + (DSIZE) + (DSIZE-1)) / DSIZE );
  }

  /* Search the free list for a fit */
  if ((bp = find_fit(asize)) != NULL) {
    place(bp, asize);
    return bp;
  }

  /* If no fit has been found, get more memory and place the block at the end */
  extendsize = MAX(asize, CHUNKSIZE);
  if ((bp = extend_heap(extendsize/WSIZE)) == NULL) return NULL;
  place(bp, asize);
  return bp;
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *ptr)
{
  size_t size = GET_SIZE(HEADERP(ptr));

  if (db2) printf("Call to free...\n");

  PUT(HEADERP(ptr), PACK(size,0));
  PUT(FOOTERP(ptr), PACK(size,0));
  coalesce(ptr);
}

/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */
void *mm_realloc(void *ptr, size_t size)
{
  /* If given NULL pointer, redirect to mm_malloc */
  if (ptr == NULL) {
    return mm_malloc(size);
  } else  if (size == 0) {
    mm_free(ptr);
    return NULL;
  } else {
    size_t oldsize = GET_SIZE(HEADERP(ptr));
    void* newptr = mm_malloc(size);
    if (newptr == NULL) return NULL;  /* If, for some reason, malloc fails */
    /* Need to copy data */
    if (size < oldsize) oldsize = size;
    memcpy(newptr, ptr, oldsize);
    mm_free(ptr);
    return newptr;
  }
}

/*
 * extend_heap: extend heap by adding free block to end of it
 */
static void *extend_heap(size_t words) {
  char *bp;
  size_t size;

  if (db1) printf("Running extend_heap...\n");

  /* Allocate an even number of words to maintain alignment */
  size = (words%2) ? (words+1) * WSIZE : words * WSIZE;
  if ((long)(bp = mem_sbrk(size)) == -1) return NULL;

  /* Initialize free block header/footer and the epilogue header */
  PUT(HEADERP(bp), PACK(size,0));         /* New block header */
  PUT(FOOTERP(bp), PACK(size,0));         /* New block footer */
  PUT(HEADERP(NEXT_BLKP(bp)), PACK(0,1)); /* New epilogue header */
  
  /* Check if setting the first/only node or not 
  if (free_headp == 0) {
    SET_NEXT(bp, 0);
    SET_PREV(bp, 0);
    if (db1) printf("Extend_heap completed.\n");
    if (db1) printb(bp);
    return bp;
  } else {
    if (db1) printf("Extend heap completed, coalescing...\n");
    return coalesce(bp);
  }
  */
  return coalesce(bp);
}

/*
 * place: place block at bp with size asize
 */
static void place(void *bp, size_t asize) {
  size_t csize = GET_SIZE(HEADERP(bp));

  //if (db1) printf("place working...\n");
  //if (db1) printb(bp);
  if (db2) printf("place(%p, %d)\n", bp, asize);
  if (db2) printb(bp);


  if ((csize - asize) >= (MIN_BLK_SIZE)) {
    if (db2) printf("if\n");
    /*
    void* tmp_next = NEXT_FREE_BLKP(bp);
    void* tmp_prev = NEXT_FREE_BLKP(bp);
    */
    PUT(HEADERP(bp), PACK(asize,1));
    PUT(FOOTERP(bp), PACK(asize,1));
    remove_block(bp);
    bp = NEXT_BLKP(bp);
    PUT(HEADERP(bp), PACK(csize-asize,0));
    PUT(FOOTERP(bp), PACK(csize-asize,0));
    /*
    SET_NEXT(bp, tmp_next);
    SET_PREV(bp, tmp_prev);
    SET_NEXT(tmp_prev, bp);
    if (tmp_next != 0) SET_PREV(tmp_next, bp);
    */

    coalesce(bp);
  } else {
    if (db2) printf("else\n");
    PUT(HEADERP(bp), PACK(csize,1));
    PUT(FOOTERP(bp), PACK(csize,1));
    remove_block(bp);
  }
  
  //if (db1) printf("place done working\n");
}

/* 
 * find_fit: find first free block in list of size asize
 */
static void *find_fit(size_t asize) {
  void *bp;
  
  /* Loops through all blocks in list until large enough block is found */
  for (bp = free_headp; bp != 0; bp = NEXT_FREE_BLKP(bp)) {
    if (asize <= GET_SIZE(HEADERP(bp))) {
      return bp;
    }
  }
  return NULL;  /* Couldn't find any fit */
}

/*
 * remove_block: removes block from free list and keeps list intact
 */
static void remove_block(void* bp) {
  void* prev = PREV_FREE_BLKP(bp);
  void* next = NEXT_FREE_BLKP(bp);

  if (prev == 0) {
    /* bp is first block in list, set next to free_headp */
    free_headp = next;
  } else {
    /* bp is not first block in list, set prev's next to next */
    SET_NEXT(prev, next);
  }

  /* If bp is not the end of the list, set next's prev to prev */
  if (next >= 0x12) SET_PREV(next, prev); 
}

/*
 * add_block: add block to beginning of free list and maintain list's integrity
 */
static void add_block(void* bp) {
  /* Set next to current head */
  SET_NEXT(bp, free_headp);
  /* If next block exists, set its prev to bp */
  if (free_headp != 0) SET_PREV(free_headp, bp);
  /* Set bp to current head */
  free_headp = bp;
  /* Set bp's prev to 0 */
  SET_PREV(bp, 0);
}

/*
 * coalesce: join free block with its neighbors, if possible
 */
static void *coalesce(void *bp) {
  size_t prev_alloc = GET_ALLOC(FOOTERP(PREV_BLKP(bp)));
  size_t next_alloc = GET_ALLOC(HEADERP(NEXT_BLKP(bp)));
  size_t size = GET_SIZE(HEADERP(bp));

  /* Coalesce conditions */
  if (prev_alloc && next_alloc) {
    /* If both neighbors are allocated, do nothing */
    add_block(bp);
    return bp;
  } else if (prev_alloc && !next_alloc) {
    /* If next neighbor free, join them */
    size += GET_SIZE(HEADERP(NEXT_BLKP(bp)));
    remove_block(NEXT_BLKP(bp));
    PUT(HEADERP(bp), PACK(size,0));
    PUT(FOOTERP(bp), PACK(size,0));
  } else if (!prev_alloc && next_alloc) {
    /* If prev neighborn is free, join them */
    size += GET_SIZE(HEADERP(PREV_BLKP(bp)));
    remove_block(PREV_BLKP(bp));
    PUT(FOOTERP(bp), PACK(size,0));
    PUT(HEADERP(PREV_BLKP(bp)), PACK(size,0));
    bp = PREV_BLKP(bp);
  } else {
    /* Both neighbors are free, join all of them for one big free block! */
    size += GET_SIZE(HEADERP(PREV_BLKP(bp))) + GET_SIZE(FOOTERP(NEXT_BLKP(bp)));
    remove_block(PREV_BLKP(bp));
    remove_block(NEXT_BLKP(bp));
    PUT(HEADERP(PREV_BLKP(bp)), PACK(size,0));
    PUT(FOOTERP(NEXT_BLKP(bp)), PACK(size,0));
    bp = PREV_BLKP(bp);
  }
  add_block(bp);
  return bp;
}

/*
 * printb: prints a block from list
 */
static void printb(void* bp) {
  size_t head = GET_SIZE(HEADERP(bp));
  size_t foot = GET_SIZE(FOOTERP(bp));
  size_t h_alloc = GET_ALLOC(HEADERP(bp));
  size_t f_alloc = GET_ALLOC(FOOTERP(bp));
  void* next = NEXT_FREE_BLKP(bp);
  void* prev = PREV_FREE_BLKP(bp);


  if (h_alloc != f_alloc) printf("Alloc bits do not match!\n");
  if (head != foot) printf("Header and footer sizes do not match!\n");
  if ((size_t)bp % ALIGNMENT) printf("Block not aligned to %d bytes!\n", ALIGNMENT);
  printf("%p: head = %d, foot = %d, alloc = %d\n", bp, head, foot, h_alloc);
  printf("\tNext = %p, Prev = %p\n", next, prev);
}

/*
 * check_heap: prints out status of the heap
 */
static void check_heap() {
  void* bp = free_headp;

  printf("CHECKING HEAP -----------------------\n");
  printf("Head: %p ", bp);

  bp = free_headp;
  while (bp != 0) {
    printb(bp);
    bp = NEXT_FREE_BLKP(bp);
  }
  printf("-------------------------------------\n");
}

/*
 * real_check_heap: checks entire heap, even allocated blocks
 */
static void real_check_heap() {
  void* bp = heap_listp;

  printf("ACTUALLY CHECKING HEAP -----------------------\n");
  printf("Head: %p ", bp);

  while (GET_SIZE(HEADERP(bp)) != 0) {
    printb(bp);
    bp = NEXT_BLKP(bp);
  }
  printf("----------------------------------------------\n");
}
